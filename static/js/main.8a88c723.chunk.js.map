{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.module.css","components/StatisticsItem/StatisticsItem.module.css","components/Section/Section.module.css","App.module.css","components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Feedback/Feedback.js","components/StatisticsItem/StatisticsItem.js","components/Notification/Notification.js","components/Statistics/Statistics.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Section","props","title","children","className","s","container","FeedbackOptions","options","onLeaveFeedback","listButtons","map","option","listItem","button","onClick","toUpperCase","slice","uuidv4","Feedback","StatisticsItem","name","value","isPercent","itemTitle","itemValue","defaultProps","Notification","message","Statistics","good","neutral","bad","total","percent","App","state","increment","type","setState","Object","values","this","reduce","acc","Math","floor","countTotalFeedback","countPositiveFeedbackPercentage","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a88c723.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listButtons\":\"FeedbackOptions_listButtons__9MO9u\",\"listItem\":\"FeedbackOptions_listItem__3rxMg\",\"button\":\"FeedbackOptions_button__15RG1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"StatisticsItem_listItem__3tPGT\",\"itemTitle\":\"StatisticsItem_itemTitle__NpQF4\",\"itemValue\":\"StatisticsItem_itemValue__3d7Jt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Section_container__E5Ty5\",\"title\":\"Section_title__2_G44\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3n5eN\"};","import s from './Section.module.css';\n\nconst Section = props => {\n  const { title, children } = props;\n  return (\n    <div className={s.container}>\n      <span className={s.title}>{title}</span>\n      {children}\n    </div>\n  );\n};\n\nexport default Section;\n","import PropTypes from 'prop-types';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nimport s from './FeedbackOptions.module.css';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <ul className={s.listButtons}>\n      {options.map(option => {\n        return (\n          <li className={s.listItem} key={uuidv4()}>\n            <button\n              className={s.button}\n              onClick={() => onLeaveFeedback(option)}\n            >\n              {option[0].toUpperCase() + option.slice(1)}\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default FeedbackOptions;\n\nFeedbackOptions.propTypes = {\n  onLeaveFeedback: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\n\nimport Section from '../Section';\nimport FeedbackOptions from '../FeedbackOptions';\n\nconst Feedback = ({ options, onLeaveFeedback }) => {\n  return (\n    <Section title=\"Feedback\">\n      <FeedbackOptions options={options} onLeaveFeedback={onLeaveFeedback} />\n    </Section>\n  );\n};\n\nexport default Feedback;\n\nFeedback.propTypes = {\n  onLeaveFeedback: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport s from './StatisticsItem.module.css';\n\nconst StatisticsItem = props => {\n  const { name, value, isPercent } = props;\n  return (\n    <li className={s.listItem}>\n      <span className={s.itemTitle}>{name}:</span>\n      <span className={s.itemValue}>\n        {value} {isPercent ? '%' : null}\n      </span>\n    </li>\n  );\n};\n\nStatisticsItem.defaultProps = {\n  value: 0,\n  isPercent: false,\n};\n\nexport default StatisticsItem;\n\nStatisticsItem.propTypes = {\n  name: PropTypes.string,\n  value: PropTypes.number,\n  isPercent: PropTypes.bool,\n};\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return <h2>{message}</h2>;\n};\n\nexport default Notification;\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n","import PropTypes from 'prop-types';\n\nimport Section from '../Section';\nimport StatisticsItem from '../StatisticsItem';\nimport Notification from '../Notification';\n\nconst Statistics = ({ good, neutral, bad, total, percent }) => {\n  return (\n    <Section title=\"Statistics\">\n      {total ? (\n        <ul>\n          <StatisticsItem name=\"Good\" value={good} />\n          <StatisticsItem name=\"Neutral\" value={neutral} />\n          <StatisticsItem name=\"Bad\" value={bad} />\n          <StatisticsItem name=\"Total\" value={total} />\n          <StatisticsItem\n            name=\"Positive feedback\"\n            value={percent}\n            isPercent={true}\n          />\n        </ul>\n      ) : (\n        <Notification message=\"No feedback given\" />\n      )}\n    </Section>\n  );\n};\n\nexport default Statistics;\n\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  percent: PropTypes.number,\n};\n","import { Component } from 'react';\n\nimport Feedback from './components/Feedback';\nimport Statistics from './components/Statistics';\n\nimport s from './App.module.css';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  increment = type => {\n    this.setState({ [type]: this.state[type] + 1 });\n  };\n\n  countTotalFeedback() {\n    return Object.values(this.state).reduce((acc, value) => {\n      return acc + value;\n    }, 0);\n  }\n\n  countPositiveFeedbackPercentage() {\n    return Math.floor((this.state.good * 100) / this.countTotalFeedback());\n  }\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <div className={s.App}>\n        <Feedback\n          options={['good', 'neutral', 'bad']}\n          onLeaveFeedback={this.increment}\n        />\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={this.countTotalFeedback()}\n          percent={this.countPositiveFeedbackPercentage()}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}